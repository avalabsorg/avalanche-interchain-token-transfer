// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20tokenhub

import (
	"errors"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/accounts/abi/bind"
	"github.com/ava-labs/subnet-evm/core/types"
	"github.com/ava-labs/subnet-evm/interfaces"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = interfaces.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SendAndCallInput is an auto generated low-level Go binding around an user-defined struct.
type SendAndCallInput struct {
	DestinationBlockchainID  [32]byte
	DestinationBridgeAddress common.Address
	RecipientContract        common.Address
	RecipientPayload         []byte
	RequiredGasLimit         *big.Int
	RecipientGasLimit        *big.Int
	MultiHopFallback         common.Address
	FallbackRecipient        common.Address
	PrimaryFeeTokenAddress   common.Address
	PrimaryFee               *big.Int
	SecondaryFee             *big.Int
}

// SendTokensInput is an auto generated low-level Go binding around an user-defined struct.
type SendTokensInput struct {
	DestinationBlockchainID  [32]byte
	DestinationBridgeAddress common.Address
	Recipient                common.Address
	PrimaryFeeTokenAddress   common.Address
	PrimaryFee               *big.Int
	SecondaryFee             *big.Int
	RequiredGasLimit         *big.Int
	MultiHopFallback         common.Address
}

// ERC20TokenHubMetaData contains all meta data concerning the ERC20TokenHub contract.
var ERC20TokenHubMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleporterManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CallSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"spokeBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spokeBridgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinTeleporterVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinTeleporterVersion\",\"type\":\"uint256\"}],\"name\":\"MinTeleporterVersionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"spokeBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spokeBridgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialCollateralNeeded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"SpokeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"TeleporterAddressPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"TeleporterAddressUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"teleporterMessageID\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipientGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiHopFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fallbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryFeeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"primaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structSendAndCallInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensAndCallRouted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"teleporterMessageID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipientGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiHopFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fallbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryFeeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"primaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structSendAndCallInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensAndCallSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"teleporterMessageID\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryFeeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"primaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiHopFallback\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structSendTokensInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRouted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"teleporterMessageID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryFeeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"primaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiHopFallback\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structSendTokensInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"spokeBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"spokeBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockchainID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"spokeBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"spokeBridgeAddress\",\"type\":\"address\"}],\"name\":\"bridgedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTeleporterVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"isTeleporterAddressPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"pauseTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"originSenderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveTeleporterMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"spokeBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"spokeBridgeAddress\",\"type\":\"address\"}],\"name\":\"registeredSpokes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"multiplyOnSpoke\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryFeeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"primaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiHopFallback\",\"type\":\"address\"}],\"internalType\":\"structSendTokensInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipientGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"multiHopFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fallbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryFeeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"primaryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFee\",\"type\":\"uint256\"}],\"internalType\":\"structSendAndCallInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleporterRegistry\",\"outputs\":[{\"internalType\":\"contractTeleporterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"unpauseTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"updateMinTeleporterVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101206040523480156200001257600080fd5b506040516200463a3803806200463a833981016040819052620000359162000401565b6001600055838383838383816001600160a01b038116620000c35760405162461bcd60e51b815260206004820152603760248201527f54656c65706f727465725570677261646561626c653a207a65726f2074656c6560448201527f706f72746572207265676973747279206164647265737300000000000000000060648201526084015b60405180910390fd5b6001600160a01b03811660808190526040805163301fd1f560e21b8152905163c07f47d4916004808201926020929091908290030181865afa1580156200010e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000134919062000465565b600255506200014333620002b5565b6200014e8162000307565b505060016004819055507302000000000000000000000000000000000000056001600160a01b0316634213cf786040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d1919062000465565b60a0526001600160a01b0382166200022c5760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e4875623a207a65726f20746f6b656e2061646472657373000000006044820152606401620000ba565b60128160ff1611156200028c5760405162461bcd60e51b815260206004820152602160248201527f546f6b656e4875623a20746f6b656e20646563696d616c7320746f6f206869676044820152600d60fb1b6064820152608401620000ba565b6001600160a01b0390911660c081905260ff90911660e05261010052506200047f945050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200031162000386565b6001600160a01b038116620003785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000ba565b6200038381620002b5565b50565b6003546001600160a01b03163314620003e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000ba565b565b80516001600160a01b0381168114620003fc57600080fd5b919050565b600080600080608085870312156200041857600080fd5b6200042385620003e4565b93506200043360208601620003e4565b92506200044360408601620003e4565b9150606085015160ff811681146200045a57600080fd5b939692955090935050565b6000602082840312156200047857600080fd5b5051919050565b60805160a05160c05160e05161010051614106620005346000396000818161037c01528181611b6f01528181611b9b01528181611bd801528181611c8701528181611cfb01528181611dd901526125e30152600081816101bd0152818161241801526124a30152600081816103000152818161117101526112b501526000818161033a015281816105e8015261224b0152600081816101690152818161064101528181610a93015261279401526141066000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063d127dc9b11610071578063d127dc9b14610335578063d2cc7a701461035c578063f2fde38b14610364578063fc0c546a14610377578063fd6582681461039e57600080fd5b8063715018a6146102a65780638da5cb5b146102ae57806397314297146102bf5780639d76ea58146102fb578063c868efaa1461032257600080fd5b80634511243e116100f45780634511243e146101f15780635d16225d146102045780635eb9951414610217578063656900381461022a5780636d95e4ca1461023d57600080fd5b806302ee3e9c146101265780631a7f5bec146101645780632b0d8f18146101a35780633b97e856146101b8575b600080fd5b61015161013436600461317e565b600660209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61018b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015b565b6101b66101b13660046131ae565b6103b1565b005b6101df7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161015b565b6101b66101ff3660046131ae565b6104b6565b6101b66102123660046131cb565b6105b3565b6101b66102253660046131fd565b6105cf565b6101b6610238366004613216565b6105e3565b61028261024b36600461317e565b6005602090815260009283526040808420909152908252902080546001820154600283015460039093015460ff9283169391921684565b6040805194151585526020850193909352918301521515606082015260800161015b565b6101b6610618565b6003546001600160a01b031661018b565b6102eb6102cd3660046131ae565b6001600160a01b031660009081526001602052604090205460ff1690565b604051901515815260200161015b565b61018b7f000000000000000000000000000000000000000000000000000000000000000081565b6101b6610330366004613260565b61062c565b6101517f000000000000000000000000000000000000000000000000000000000000000081565b600254610151565b6101b66103723660046131ae565b6107f6565b61018b7f000000000000000000000000000000000000000000000000000000000000000081565b6101b66103ac3660046132e8565b61086c565b6103b961087c565b6001600160a01b0381166103e85760405162461bcd60e51b81526004016103df90613320565b60405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff16156104675760405162461bcd60e51b815260206004820152602d60248201527f54656c65706f727465725570677261646561626c653a2061646472657373206160448201526c1b1c9958591e481c185d5cd959609a1b60648201526084016103df565b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c9190a250565b6104be61087c565b6001600160a01b0381166104e45760405162461bcd60e51b81526004016103df90613320565b6001600160a01b03811660009081526001602052604090205460ff1661055e5760405162461bcd60e51b815260206004820152602960248201527f54656c65706f727465725570677261646561626c653a2061646472657373206e6044820152681bdd081c185d5cd95960ba1b60648201526084016103df565b6040516001600160a01b038216907f844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c390600090a26001600160a01b03166000908152600160205260409020805460ff19169055565b6105cb6105c536849003840184613422565b82610884565b5050565b6105d761087c565b6105e081610a8f565b50565b6105cb7f000000000000000000000000000000000000000000000000000000000000000030336106128661352b565b85610c2f565b610620610e35565b61062a6000610e8f565b565b610634610ee1565b6002546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016634c1f08ce336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf91906135fc565b10156107365760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a20696e76616c6964205460448201526f32b632b837b93a32b91039b2b73232b960811b60648201526084016103df565b61073f336102cd565b156107a55760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a2054656c65706f72746560448201526f1c881859191c995cdcc81c185d5cd95960821b60648201526084016103df565b6107e6848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f3a92505050565b6107f06001600055565b50505050565b6107fe610e35565b6001600160a01b0381166108635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103df565b6105e081610e8f565b61087783838361133b565b505050565b61062a610e35565b6001600454146108a65760405162461bcd60e51b81526004016103df90613615565b60026004556108b4826114fe565b60e08201516001600160a01b0316156108df5760405162461bcd60e51b81526004016103df90613659565b6000806108ff8460000151856020015185876060015188608001516115ce565b9150915060006040518060400160405280600160048111156109235761092361369e565b8152602001604051806040016040528088604001516001600160a01b031681526020018681525060405160200161095a91906136b4565b60405160208183030381529060405281525090506000610a3c6040518060c001604052808860000151815260200188602001516001600160a01b0316815260200160405180604001604052808a606001516001600160a01b031681526020018781525081526020018860c00151815260200160006001600160401b038111156109e5576109e561336e565b604051908082528060200260200182016040528015610a0e578160200160208202803683370190505b50815260200184604051602001610a259190613724565b604051602081830303815290604052815250611776565b9050336001600160a01b0316817f93f19bf1ec58a15dc643b37e7e18a1c13e85e06cd11929e283154691ace9fb528887604051610a7a929190613769565b60405180910390a35050600160045550505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1391906135fc565b60025490915081831115610b835760405162461bcd60e51b815260206004820152603160248201527f54656c65706f727465725570677261646561626c653a20696e76616c6964205460448201527032b632b837b93a32b9103b32b939b4b7b760791b60648201526084016103df565b808311610bf85760405162461bcd60e51b815260206004820152603f60248201527f54656c65706f727465725570677261646561626c653a206e6f7420677265617460448201527f6572207468616e2063757272656e74206d696e696d756d2076657273696f6e0060648201526084016103df565b6002839055604051839082907fa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d90600090a3505050565b600160045414610c515760405162461bcd60e51b81526004016103df90613615565b6002600455610c5f8261189c565b60c08201516001600160a01b031615610c8a5760405162461bcd60e51b81526004016103df90613659565b600080610cac84600001518560200151858761010001518861012001516115ce565b915091506000604051806040016040528060026004811115610cd057610cd061369e565b81526020016040518061010001604052808b81526020018a6001600160a01b03168152602001896001600160a01b0316815260200188604001516001600160a01b03168152602001868152602001886060015181526020018860a0015181526020018860e001516001600160a01b0316815250604051602001610d5391906137eb565b60405160208183030381529060405281525090506000610ddf6040518060c001604052808860000151815260200188602001516001600160a01b0316815260200160405180604001604052808a61010001516001600160a01b031681526020018781525081526020018860800151815260200160006001600160401b038111156109e5576109e561336e565b9050866001600160a01b0316817f5d76dff81bf773b908b050fa113d39f7d8135bb4175398f313ea19cd3a1a0b168887604051610e1d92919061388a565b60405180910390a35050600160045550505050505050565b6003546001600160a01b0316331461062a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260005403610f335760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103df565b6002600055565b600081806020019051810190610f5091906139b2565b9050600181516004811115610f6757610f6761369e565b03610fb15760008160200151806020019051810190610f869190613a40565b90506000610f9986868460200151611aaf565b9050610fa9826000015182611b1f565b505050505050565b600281516004811115610fc657610fc661369e565b036110df5760008160200151806020019051810190610fe59190613a7a565b90506000610ff886868460800151611aaf565b8251909150861461105d5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4875623a206d69736d61746368656420736f7572636520626c6f636044820152681ad8da185a5b88125160ba1b60648201526084016103df565b846001600160a01b031682602001516001600160a01b0316146110d55760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e4875623a206d69736d617463686564206f726967696e2073656e646044820152696572206164647265737360b01b60648201526084016103df565b610fa98282611b96565b6003815160048111156110f4576110f461369e565b036111d557600081602001518060200190518101906111139190613b49565b905060008061112c878785606001518660800151611e00565b915091506111cc6040518061010001604052808560000151815260200185602001516001600160a01b0316815260200185604001516001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001838152602001600081526020018560a0015181526020018560c001516001600160a01b031681525083611e91565b50505050505050565b6004815160048111156111ea576111ea61369e565b036112f357600081602001518060200190518101906112099190613be4565b905060008061122387878560800151866101400151611e00565b915091506111cc878785600001516040518061016001604052808860200151815260200188604001516001600160a01b0316815260200188606001516001600160a01b031681526020018860a00151815260200188610100015181526020018860c0015181526020018861012001516001600160a01b031681526020018860e001516001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001868152602001600081525086612018565b6000815160048111156113085761130861369e565b036107f057600081602001518060200190518101906113279190613cf2565b90506113348585836121f1565b5050505050565b60016004541461135d5760405162461bcd60e51b81526004016103df90613615565b6002600481905560008481526005602090815260408083206001600160a01b03871684528252918290208251608081018452815460ff908116151580835260018401549483019490945294820154938101939093526003015490921615156060820152906113dd5760405162461bcd60e51b81526004016103df90613d56565b60008160200151116114315760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4875623a207a65726f20636f6c6c61746572616c206e656564656460448201526064016103df565b61143a826125dc565b91506000808260200151841061146b5760208301516000925061145d9085613da3565b90508260200151935061147e565b83836020015161147b9190613da3565b91505b60008681526005602090815260408083206001600160a01b03891680855290835292819020600101859055805187815291820185905288917f6769a5f9bfc8b6e0db839ab981cbf9239274ae72d2d035081a9157d43bd33cb6910160405180910390a380156114f1576114f13382611b1f565b5050600160045550505050565b60408101516001600160a01b03166115585760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4875623a207a65726f20726563697069656e74206164647265737360448201526064016103df565b60008160c001511161157c5760405162461bcd60e51b81526004016103df90613db6565b60a0810151156105e05760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4875623a206e6f6e2d7a65726f207365636f6e646172792066656560448201526064016103df565b60008581526005602090815260408083206001600160a01b038816845282528083208151608081018352815460ff908116151580835260018401549583019590955260028301549382019390935260039091015490911615156060820152829161164a5760405162461bcd60e51b81526004016103df90613d56565b6020810151156116aa5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4875623a20636f6c6c61746572616c206e656564656420666f722060448201526473706f6b6560d81b60648201526084016103df565b6116b3866125dc565b955083156116c9576116c685338661260f565b93505b60006116de8260400151836060015189612778565b9050600081116117305760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e4875623a207a65726f207363616c656420616d6f756e740000000060448201526064016103df565b60008981526006602090815260408083206001600160a01b038c16845290915281208054839290611762908490613df7565b909155509099949850939650505050505050565b60008061178161278f565b60408401516020015190915015611826576040830151516001600160a01b03166118035760405162461bcd60e51b815260206004820152602d60248201527f54656c65706f727465725570677261646561626c653a207a65726f206665652060448201526c746f6b656e206164647265737360981b60648201526084016103df565b604083015160208101519051611826916001600160a01b039091169083906128a3565b604051630624488560e41b81526001600160a01b03821690636244885090611852908690600401613e0a565b6020604051808303816000875af1158015611871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189591906135fc565b9392505050565b60408101516001600160a01b03166119085760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4875623a207a65726f20726563697069656e7420636f6e7472616360448201526874206164647265737360b81b60648201526084016103df565b600081608001511161192c5760405162461bcd60e51b81526004016103df90613db6565b60008160a001511161198b5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4875623a207a65726f20726563697069656e7420676173206c696d6044820152611a5d60f21b60648201526084016103df565b80608001518160a00151106119f05760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4875623a20696e76616c696420726563697069656e7420676173206044820152641b1a5b5a5d60da1b60648201526084016103df565b60e08101516001600160a01b0316611a5c5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4875623a207a65726f2066616c6c6261636b20726563697069656e60448201526874206164647265737360b81b60648201526084016103df565b610140810151156105e05760405162461bcd60e51b815260206004820181905260248201527f546f6b656e4875623a206e6f6e2d7a65726f207365636f6e646172792066656560448201526064016103df565b60008381526005602090815260408083206001600160a01b038616845282528083208151608081018352815460ff908116151582526001830154948201949094526002820154928101929092526003015490911615156060820152611b1681868686612988565b95945050505050565b816001600160a01b03167f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b82604051611b5a91815260200190565b60405180910390a26105cb6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383612a78565b611bc57f00000000000000000000000000000000000000000000000000000000000000008360600151836128a3565b60008260000151836020015184604001517f0000000000000000000000000000000000000000000000000000000000000000858760a00151604051602401611c1296959493929190613ec3565b60408051601f198184030181529190526020810180516001600160e01b03166394395edd60e01b17905260c08401516060850151919250600091611c57919084612aa8565b6060850151604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529192506000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e90604401602060405180830381865afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf491906135fc565b9050611d267f000000000000000000000000000000000000000000000000000000000000000086606001516000612ab7565b8115611d785784606001516001600160a01b03167f104deb555f67e63782bb817bc26c39050894645f9b9f29c4be8ae68d0e8b7ff485604051611d6b91815260200190565b60405180910390a2611dc0565b84606001516001600160a01b03167fb9eaeae386d339f8115782f297a9e5f0e13fb587cd6b0d502f113cb8dd4d6cb085604051611db791815260200190565b60405180910390a25b80156113345760e0850151611334906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083612a78565b60008481526005602090815260408083206001600160a01b038716845282528083208151608081018352815460ff908116151582526001830154948201949094526002820154928101929092526003015490911615156060820152819081611e6a82898989612988565b90506000611e818360400151846060015188612bcc565b9199919850909650505050505050565b600160045414611eb35760405162461bcd60e51b81526004016103df90613615565b6002600455611ec1826114fe565b6000611edb83600001518460200151848660800151612bdb565b905080600003611ef957611ef38360e0015183611b1f565b5061200f565b604080518082019091526000908060018152602001604051806040016040528087604001516001600160a01b0316815260200185815250604051602001611f4091906136b4565b60405160208183030381529060405281525090506000611fcf6040518060c001604052808760000151815260200187602001516001600160a01b03168152602001604051806040016040528089606001516001600160a01b03168152602001896080015181525081526020018760c00151815260200160006001600160401b038111156109e5576109e561336e565b9050807f825080857c76cef4a1629c0705a7f8b4ef0282ddcafde0b6715c4fb34b68aaf08685604051612003929190613769565b60405180910390a25050505b50506001600455565b60016004541461203a5760405162461bcd60e51b81526004016103df90613615565b60026004556120488261189c565b60006120638360000151846020015184866101200151612bdb565b9050806000036120815761207b8360c0015183611b1f565b506121e5565b6040805180820190915260009080600281526020016040518061010001604052808a8152602001896001600160a01b03168152602001886001600160a01b0316815260200187604001516001600160a01b03168152602001858152602001876060015181526020018760a0015181526020018760e001516001600160a01b031681525060405160200161211491906137eb565b604051602081830303815290604052815250905060006121a56040518060c001604052808760000151815260200187602001516001600160a01b0316815260200160405180604001604052808961010001516001600160a01b0316815260200189610120015181525081526020018760800151815260200160006001600160401b038111156109e5576109e561336e565b9050807f42eff9005856e3c586b096d67211a566dc926052119fd7cc08023c70937ecb3086856040516121d992919061388a565b60405180910390a25050505b50506001600455505050565b826122495760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4875623a207a65726f2073706f6b6520626c6f636b636861696e20604482015261125160f21b60648201526084016103df565b7f000000000000000000000000000000000000000000000000000000000000000083036122ce5760405162461bcd60e51b815260206004820152602d60248201527f546f6b656e4875623a2063616e6e6f742072656769737465722073706f6b652060448201526c37b71039b0b6b29031b430b4b760991b60648201526084016103df565b6001600160a01b0382166123305760405162461bcd60e51b815260206004820152602360248201527f546f6b656e4875623a207a65726f2073706f6b6520627269646765206164647260448201526265737360e81b60648201526084016103df565b60008381526005602090815260408083206001600160a01b038616845290915290205460ff16156123ae5760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4875623a2073706f6b6520616c7265616479207265676973746572604482015261195960f21b60648201526084016103df565b6012816040015160ff1611156124165760405162461bcd60e51b815260206004820152602760248201527f546f6b656e4875623a2073706f6b6520746f6b656e20646563696d616c7320746044820152660dede40d0d2ced60cb1b60648201526084016103df565b7f000000000000000000000000000000000000000000000000000000000000000060ff16816020015160ff161461249b5760405162461bcd60e51b8152602060048201526024808201527f546f6b656e4875623a20696e76616c69642068756220746f6b656e20646563696044820152636d616c7360e01b60648201526084016103df565b6000806124cc7f00000000000000000000000000000000000000000000000000000000000000008460400151612d33565b9150915060006124e183838660000151612bcc565b90508180156124fb575083516124f8908490613f1a565b15155b1561250e5761250b600182613df7565b90505b60408051608081018252600180825260208083018581528385018881528715156060860190815260008d8152600585528781206001600160a01b038e1680835295528790209551865490151560ff1991821617875592519486019490945551600285015591516003909301805493151593909216929092179055858201519151909188917f4edc8c0fd01059a8676c9ddadc761869763e7c27856881e50a0390619959fac4916125cc9186919091825260ff16602082015260400190565b60405180910390a3505050505050565b60006126097f0000000000000000000000000000000000000000000000000000000000000000338461260f565b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a0823190602401602060405180830381865afa158015612658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267c91906135fc565b90506126936001600160a01b038616853086612d7c565b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa1580156126da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fe91906135fc565b90508181116127645760405162461bcd60e51b815260206004820152602c60248201527f5361666545524332305472616e7366657246726f6d3a2062616c616e6365206e60448201526b1bdd081a5b98dc99585cd95960a21b60648201526084016103df565b61276e8282613da3565b9695505050505050565b60006127878484846001612db4565b949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d820e64f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128149190613f2e565b9050612838816001600160a01b031660009081526001602052604090205460ff1690565b1561289e5760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a2054656c65706f72746560448201526f1c881cd95b991a5b99c81c185d5cd95960821b60648201526084016103df565b919050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156128f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291891906135fc565b6129229190613df7565b6040516001600160a01b0385166024820152604481018290529091506107f090859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ddc565b83516000906129a95760405162461bcd60e51b81526004016103df90613d56565b602085015115612a065760405162461bcd60e51b815260206004820152602260248201527f546f6b656e4875623a2073706f6b65206e6f7420636f6c6c61746572616c697a604482015261195960f21b60648201526084016103df565b612a11848484612eae565b6000612a268660400151876060015185612bcc565b905060008111611b165760405162461bcd60e51b815260206004820152601b60248201527f546f6b656e4875623a207a65726f20746f6b656e20616d6f756e74000000000060448201526064016103df565b6040516001600160a01b03831660248201526044810182905261087790849063a9059cbb60e01b90606401612951565b60006127878460008585612f66565b801580612b315750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2f91906135fc565b155b612b9c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103df565b6040516001600160a01b03831660248201526044810182905261087790849063095ea7b360e01b90606401612951565b60006127878484846000612db4565b60008481526005602090815260408083206001600160a01b038716845282528083208151608081018352815460ff9081161580158352600184015495830195909552600283015493820193909352600390910154909116151560608201529080612c49575060008160200151115b15612c58576000915050612787565b828411612cbb5760405162461bcd60e51b815260206004820152602b60248201527f546f6b656e4875623a20696e73756666696369656e7420616d6f756e7420746f60448201526a20636f766572206665657360a81b60648201526084016103df565b612cc58385613da3565b93506000612cdc8260400151836060015187612778565b905080600003612cf157600092505050612787565b60008781526006602090815260408083206001600160a01b038a16845290915281208054839290612d23908490613df7565b9091555090979650505050505050565b60008060ff808516908416118181612d5757612d4f8587613f4b565b60ff16612d65565b612d618686613f4b565b60ff165b612d7090600a614048565b96919550909350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526107f09085906323b872dd60e01b90608401612951565b600081151584151503612dd257612dcb8584614054565b9050612787565b611b16858461406b565b6000612e31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661303b9092919063ffffffff16565b8051909150156108775780806020019051810190612e4f919061407f565b6108775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103df565b60008381526006602090815260408083206001600160a01b038616845290915290205481811015612f2f5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4875623a20696e73756666696369656e74206272696467652062616044820152646c616e636560d81b60648201526084016103df565b612f398282613da3565b60009485526006602090815260408087206001600160a01b03909616875294905292909320919091555050565b6000845a1015612fb85760405162461bcd60e51b815260206004820152601b60248201527f43616c6c5574696c733a20696e73756666696369656e7420676173000000000060448201526064016103df565b834710156130085760405162461bcd60e51b815260206004820152601d60248201527f43616c6c5574696c733a20696e73756666696369656e742076616c756500000060448201526064016103df565b826001600160a01b03163b60000361302257506000612787565b600080600084516020860188888bf19695505050505050565b6060612787848460008585600080866001600160a01b0316858760405161306291906140a1565b60006040518083038185875af1925050503d806000811461309f576040519150601f19603f3d011682016040523d82523d6000602084013e6130a4565b606091505b50915091506130b5878383876130c0565b979650505050505050565b6060831561312f578251600003613128576001600160a01b0385163b6131285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103df565b5081612787565b61278783838151156131445781518083602001fd5b8060405162461bcd60e51b81526004016103df91906140bd565b6001600160a01b03811681146105e057600080fd5b803561289e8161315e565b6000806040838503121561319157600080fd5b8235915060208301356131a38161315e565b809150509250929050565b6000602082840312156131c057600080fd5b81356118958161315e565b6000808284036101208112156131e057600080fd5b610100808212156131f057600080fd5b9395938601359450505050565b60006020828403121561320f57600080fd5b5035919050565b6000806040838503121561322957600080fd5b82356001600160401b0381111561323f57600080fd5b8301610160818603121561325257600080fd5b946020939093013593505050565b6000806000806060858703121561327657600080fd5b8435935060208501356132888161315e565b925060408501356001600160401b03808211156132a457600080fd5b818701915087601f8301126132b857600080fd5b8135818111156132c757600080fd5b8860208285010111156132d957600080fd5b95989497505060200194505050565b6000806000606084860312156132fd57600080fd5b83359250602084013561330f8161315e565b929592945050506040919091013590565b6020808252602e908201527f54656c65706f727465725570677261646561626c653a207a65726f2054656c6560408201526d706f72746572206164647265737360901b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156133a7576133a761336e565b60405290565b60405161016081016001600160401b03811182821017156133a7576133a761336e565b604080519081016001600160401b03811182821017156133a7576133a761336e565b604051601f8201601f191681016001600160401b038111828210171561341a5761341a61336e565b604052919050565b6000610100828403121561343557600080fd5b61343d613384565b82358152602083013561344f8161315e565b602082015260408301356134628161315e565b604082015261347360608401613173565b60608201526080830135608082015260a083013560a082015260c083013560c08201526134a260e08401613173565b60e08201529392505050565b60006001600160401b038211156134c7576134c761336e565b50601f01601f191660200190565b600082601f8301126134e657600080fd5b81356134f96134f4826134ae565b6133f2565b81815284602083860101111561350e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000610160823603121561353e57600080fd5b6135466133ad565b8235815261355660208401613173565b602082015261356760408401613173565b604082015260608301356001600160401b0381111561358557600080fd5b613591368286016134d5565b6060830152506080830135608082015260a083013560a08201526135b760c08401613173565b60c08201526135c860e08401613173565b60e08201526101006135db818501613173565b90820152610120838101359082015261014092830135928101929092525090565b60006020828403121561360e57600080fd5b5051919050565b60208082526024908201527f53656e645265656e7472616e637947756172643a2073656e64207265656e7472604082015263616e637960e01b606082015260800190565b60208082526025908201527f546f6b656e4875623a206e6f6e2d7a65726f206d756c74692d686f702066616c6040820152646c6261636b60d81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b81516001600160a01b031681526020808301519082015260408101612609565b60005b838110156136ef5781810151838201526020016136d7565b50506000910152565b600081518084526137108160208601602086016136d4565b601f01601f19169290920160200192915050565b60208152600082516005811061374a57634e487b7160e01b600052602160045260246000fd5b80602084015250602083015160408084015261278760608401826136f8565b60006101208201905083518252602084015160018060a01b03808216602085015280604087015116604085015280606087015116606085015250506080840151608083015260a084015160a083015260c084015160c083015260e08401516137dc60e08401826001600160a01b03169052565b50826101008301529392505050565b60208152815160208201526000602083015160018060a01b0380821660408501528060408601511660608501525050606083015161383460808401826001600160a01b03169052565b50608083015160a083015260a08301516101008060c085015261385b6101208501836136f8565b915060c085015160e085015260e0850151613880828601826001600160a01b03169052565b5090949350505050565b6040815282516040820152600060208401516138b160608401826001600160a01b03169052565b5060408401516001600160a01b03166080830152606084015161016060a084018190526138e26101a08501836136f8565b9150608086015160c085015260a086015160e085015260c0860151610100613914818701836001600160a01b03169052565b60e08801519150610120613932818801846001600160a01b03169052565b90880151915061014090613950878301846001600160a01b03169052565b880151928601929092525090940151610180830152506020015290565b600082601f83011261397e57600080fd5b815161398c6134f4826134ae565b8181528460208386010111156139a157600080fd5b6127878260208301602087016136d4565b6000602082840312156139c457600080fd5b81516001600160401b03808211156139db57600080fd5b90830190604082860312156139ef57600080fd5b6139f76133d0565b825160058110613a0657600080fd5b8152602083015182811115613a1a57600080fd5b613a268782860161396d565b60208301525095945050505050565b805161289e8161315e565b600060408284031215613a5257600080fd5b613a5a6133d0565b8251613a658161315e565b81526020928301519281019290925250919050565b600060208284031215613a8c57600080fd5b81516001600160401b0380821115613aa357600080fd5b908301906101008286031215613ab857600080fd5b613ac0613384565b82518152613ad060208401613a35565b6020820152613ae160408401613a35565b6040820152613af260608401613a35565b60608201526080830151608082015260a083015182811115613b1357600080fd5b613b1f8782860161396d565b60a08301525060c083015160c0820152613b3b60e08401613a35565b60e082015295945050505050565b600060e08284031215613b5b57600080fd5b60405160e081018181106001600160401b0382111715613b7d57613b7d61336e565b604052825181526020830151613b928161315e565b60208201526040830151613ba58161315e565b80604083015250606083015160608201526080830151608082015260a083015160a082015260c0830151613bd88161315e565b60c08201529392505050565b600060208284031215613bf657600080fd5b81516001600160401b0380821115613c0d57600080fd5b908301906101608286031215613c2257600080fd5b613c2a6133ad565b613c3383613a35565b815260208301516020820152613c4b60408401613a35565b6040820152613c5c60608401613a35565b60608201526080830151608082015260a083015182811115613c7d57600080fd5b613c898782860161396d565b60a08301525060c083015160c0820152613ca560e08401613a35565b60e082015261010083810151908201526101209150613cc5828401613a35565b9181019190915261014091820151918101919091529392505050565b805160ff8116811461289e57600080fd5b600060608284031215613d0457600080fd5b604051606081018181106001600160401b0382111715613d2657613d2661336e565b60405282518152613d3960208401613ce1565b6020820152613d4a60408401613ce1565b60408201529392505050565b6020808252601e908201527f546f6b656e4875623a2073706f6b65206e6f7420726567697374657265640000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561260957612609613d8d565b60208082526021908201527f546f6b656e4875623a207a65726f20726571756972656420676173206c696d696040820152601d60fa1b606082015260800190565b8082018082111561260957612609613d8d565b6020808252825182820152828101516001600160a01b039081166040808501919091528401518051821660608501528083015160808501526000929161010085019190606087015160a0870152608087015160e060c0880152805193849052840192600092506101208701905b80841015613e9957845183168252938501936001939093019290850190613e77565b5060a0880151878203601f190160e08901529450613eb781866136f8565b98975050505050505050565b8681526001600160a01b0386811660208301528581166040830152841660608201526080810183905260c060a08201819052600090613eb7908301846136f8565b634e487b7160e01b600052601260045260246000fd5b600082613f2957613f29613f04565b500690565b600060208284031215613f4057600080fd5b81516118958161315e565b60ff828116828216039081111561260957612609613d8d565b600181815b80851115613f9f578160001904821115613f8557613f85613d8d565b80851615613f9257918102915b93841c9390800290613f69565b509250929050565b600082613fb657506001612609565b81613fc357506000612609565b8160018114613fd95760028114613fe357613fff565b6001915050612609565b60ff841115613ff457613ff4613d8d565b50506001821b612609565b5060208310610133831016604e8410600b8410161715614022575081810a612609565b61402c8383613f64565b806000190482111561404057614040613d8d565b029392505050565b60006118958383613fa7565b808202811582820484141761260957612609613d8d565b60008261407a5761407a613f04565b500490565b60006020828403121561409157600080fd5b8151801515811461189557600080fd5b600082516140b38184602087016136d4565b9190910192915050565b60208152600061189560208301846136f856fea264697066735822122085600b4984fa2f61443e175efdd22b849f0afffd2cba065677166a512e86e1bf64736f6c63430008120033",
}

// ERC20TokenHubABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20TokenHubMetaData.ABI instead.
var ERC20TokenHubABI = ERC20TokenHubMetaData.ABI

// ERC20TokenHubBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20TokenHubMetaData.Bin instead.
var ERC20TokenHubBin = ERC20TokenHubMetaData.Bin

// DeployERC20TokenHub deploys a new Ethereum contract, binding an instance of ERC20TokenHub to it.
func DeployERC20TokenHub(auth *bind.TransactOpts, backend bind.ContractBackend, teleporterRegistryAddress common.Address, teleporterManager common.Address, tokenAddress_ common.Address, tokenDecimals_ uint8) (common.Address, *types.Transaction, *ERC20TokenHub, error) {
	parsed, err := ERC20TokenHubMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20TokenHubBin), backend, teleporterRegistryAddress, teleporterManager, tokenAddress_, tokenDecimals_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20TokenHub{ERC20TokenHubCaller: ERC20TokenHubCaller{contract: contract}, ERC20TokenHubTransactor: ERC20TokenHubTransactor{contract: contract}, ERC20TokenHubFilterer: ERC20TokenHubFilterer{contract: contract}}, nil
}

// ERC20TokenHub is an auto generated Go binding around an Ethereum contract.
type ERC20TokenHub struct {
	ERC20TokenHubCaller     // Read-only binding to the contract
	ERC20TokenHubTransactor // Write-only binding to the contract
	ERC20TokenHubFilterer   // Log filterer for contract events
}

// ERC20TokenHubCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20TokenHubCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenHubTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20TokenHubTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenHubFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20TokenHubFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenHubSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20TokenHubSession struct {
	Contract     *ERC20TokenHub    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20TokenHubCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20TokenHubCallerSession struct {
	Contract *ERC20TokenHubCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC20TokenHubTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TokenHubTransactorSession struct {
	Contract     *ERC20TokenHubTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC20TokenHubRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20TokenHubRaw struct {
	Contract *ERC20TokenHub // Generic contract binding to access the raw methods on
}

// ERC20TokenHubCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20TokenHubCallerRaw struct {
	Contract *ERC20TokenHubCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20TokenHubTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TokenHubTransactorRaw struct {
	Contract *ERC20TokenHubTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20TokenHub creates a new instance of ERC20TokenHub, bound to a specific deployed contract.
func NewERC20TokenHub(address common.Address, backend bind.ContractBackend) (*ERC20TokenHub, error) {
	contract, err := bindERC20TokenHub(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHub{ERC20TokenHubCaller: ERC20TokenHubCaller{contract: contract}, ERC20TokenHubTransactor: ERC20TokenHubTransactor{contract: contract}, ERC20TokenHubFilterer: ERC20TokenHubFilterer{contract: contract}}, nil
}

// NewERC20TokenHubCaller creates a new read-only instance of ERC20TokenHub, bound to a specific deployed contract.
func NewERC20TokenHubCaller(address common.Address, caller bind.ContractCaller) (*ERC20TokenHubCaller, error) {
	contract, err := bindERC20TokenHub(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubCaller{contract: contract}, nil
}

// NewERC20TokenHubTransactor creates a new write-only instance of ERC20TokenHub, bound to a specific deployed contract.
func NewERC20TokenHubTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20TokenHubTransactor, error) {
	contract, err := bindERC20TokenHub(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubTransactor{contract: contract}, nil
}

// NewERC20TokenHubFilterer creates a new log filterer instance of ERC20TokenHub, bound to a specific deployed contract.
func NewERC20TokenHubFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20TokenHubFilterer, error) {
	contract, err := bindERC20TokenHub(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubFilterer{contract: contract}, nil
}

// bindERC20TokenHub binds a generic wrapper to an already deployed contract.
func bindERC20TokenHub(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20TokenHubMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20TokenHub *ERC20TokenHubRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20TokenHub.Contract.ERC20TokenHubCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20TokenHub *ERC20TokenHubRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.ERC20TokenHubTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20TokenHub *ERC20TokenHubRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.ERC20TokenHubTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20TokenHub *ERC20TokenHubCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20TokenHub.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20TokenHub *ERC20TokenHubTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20TokenHub *ERC20TokenHubTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.contract.Transact(opts, method, params...)
}

// BlockchainID is a free data retrieval call binding the contract method 0xd127dc9b.
//
// Solidity: function blockchainID() view returns(bytes32)
func (_ERC20TokenHub *ERC20TokenHubCaller) BlockchainID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "blockchainID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BlockchainID is a free data retrieval call binding the contract method 0xd127dc9b.
//
// Solidity: function blockchainID() view returns(bytes32)
func (_ERC20TokenHub *ERC20TokenHubSession) BlockchainID() ([32]byte, error) {
	return _ERC20TokenHub.Contract.BlockchainID(&_ERC20TokenHub.CallOpts)
}

// BlockchainID is a free data retrieval call binding the contract method 0xd127dc9b.
//
// Solidity: function blockchainID() view returns(bytes32)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) BlockchainID() ([32]byte, error) {
	return _ERC20TokenHub.Contract.BlockchainID(&_ERC20TokenHub.CallOpts)
}

// BridgedBalances is a free data retrieval call binding the contract method 0x02ee3e9c.
//
// Solidity: function bridgedBalances(bytes32 spokeBlockchainID, address spokeBridgeAddress) view returns(uint256 balance)
func (_ERC20TokenHub *ERC20TokenHubCaller) BridgedBalances(opts *bind.CallOpts, spokeBlockchainID [32]byte, spokeBridgeAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "bridgedBalances", spokeBlockchainID, spokeBridgeAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BridgedBalances is a free data retrieval call binding the contract method 0x02ee3e9c.
//
// Solidity: function bridgedBalances(bytes32 spokeBlockchainID, address spokeBridgeAddress) view returns(uint256 balance)
func (_ERC20TokenHub *ERC20TokenHubSession) BridgedBalances(spokeBlockchainID [32]byte, spokeBridgeAddress common.Address) (*big.Int, error) {
	return _ERC20TokenHub.Contract.BridgedBalances(&_ERC20TokenHub.CallOpts, spokeBlockchainID, spokeBridgeAddress)
}

// BridgedBalances is a free data retrieval call binding the contract method 0x02ee3e9c.
//
// Solidity: function bridgedBalances(bytes32 spokeBlockchainID, address spokeBridgeAddress) view returns(uint256 balance)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) BridgedBalances(spokeBlockchainID [32]byte, spokeBridgeAddress common.Address) (*big.Int, error) {
	return _ERC20TokenHub.Contract.BridgedBalances(&_ERC20TokenHub.CallOpts, spokeBlockchainID, spokeBridgeAddress)
}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC20TokenHub *ERC20TokenHubCaller) GetMinTeleporterVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "getMinTeleporterVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC20TokenHub *ERC20TokenHubSession) GetMinTeleporterVersion() (*big.Int, error) {
	return _ERC20TokenHub.Contract.GetMinTeleporterVersion(&_ERC20TokenHub.CallOpts)
}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) GetMinTeleporterVersion() (*big.Int, error) {
	return _ERC20TokenHub.Contract.GetMinTeleporterVersion(&_ERC20TokenHub.CallOpts)
}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC20TokenHub *ERC20TokenHubCaller) IsTeleporterAddressPaused(opts *bind.CallOpts, teleporterAddress common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "isTeleporterAddressPaused", teleporterAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC20TokenHub *ERC20TokenHubSession) IsTeleporterAddressPaused(teleporterAddress common.Address) (bool, error) {
	return _ERC20TokenHub.Contract.IsTeleporterAddressPaused(&_ERC20TokenHub.CallOpts, teleporterAddress)
}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) IsTeleporterAddressPaused(teleporterAddress common.Address) (bool, error) {
	return _ERC20TokenHub.Contract.IsTeleporterAddressPaused(&_ERC20TokenHub.CallOpts, teleporterAddress)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubSession) Owner() (common.Address, error) {
	return _ERC20TokenHub.Contract.Owner(&_ERC20TokenHub.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) Owner() (common.Address, error) {
	return _ERC20TokenHub.Contract.Owner(&_ERC20TokenHub.CallOpts)
}

// RegisteredSpokes is a free data retrieval call binding the contract method 0x6d95e4ca.
//
// Solidity: function registeredSpokes(bytes32 spokeBlockchainID, address spokeBridgeAddress) view returns(bool registered, uint256 collateralNeeded, uint256 tokenMultiplier, bool multiplyOnSpoke)
func (_ERC20TokenHub *ERC20TokenHubCaller) RegisteredSpokes(opts *bind.CallOpts, spokeBlockchainID [32]byte, spokeBridgeAddress common.Address) (struct {
	Registered       bool
	CollateralNeeded *big.Int
	TokenMultiplier  *big.Int
	MultiplyOnSpoke  bool
}, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "registeredSpokes", spokeBlockchainID, spokeBridgeAddress)

	outstruct := new(struct {
		Registered       bool
		CollateralNeeded *big.Int
		TokenMultiplier  *big.Int
		MultiplyOnSpoke  bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.CollateralNeeded = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TokenMultiplier = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MultiplyOnSpoke = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// RegisteredSpokes is a free data retrieval call binding the contract method 0x6d95e4ca.
//
// Solidity: function registeredSpokes(bytes32 spokeBlockchainID, address spokeBridgeAddress) view returns(bool registered, uint256 collateralNeeded, uint256 tokenMultiplier, bool multiplyOnSpoke)
func (_ERC20TokenHub *ERC20TokenHubSession) RegisteredSpokes(spokeBlockchainID [32]byte, spokeBridgeAddress common.Address) (struct {
	Registered       bool
	CollateralNeeded *big.Int
	TokenMultiplier  *big.Int
	MultiplyOnSpoke  bool
}, error) {
	return _ERC20TokenHub.Contract.RegisteredSpokes(&_ERC20TokenHub.CallOpts, spokeBlockchainID, spokeBridgeAddress)
}

// RegisteredSpokes is a free data retrieval call binding the contract method 0x6d95e4ca.
//
// Solidity: function registeredSpokes(bytes32 spokeBlockchainID, address spokeBridgeAddress) view returns(bool registered, uint256 collateralNeeded, uint256 tokenMultiplier, bool multiplyOnSpoke)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) RegisteredSpokes(spokeBlockchainID [32]byte, spokeBridgeAddress common.Address) (struct {
	Registered       bool
	CollateralNeeded *big.Int
	TokenMultiplier  *big.Int
	MultiplyOnSpoke  bool
}, error) {
	return _ERC20TokenHub.Contract.RegisteredSpokes(&_ERC20TokenHub.CallOpts, spokeBlockchainID, spokeBridgeAddress)
}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubCaller) TeleporterRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "teleporterRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubSession) TeleporterRegistry() (common.Address, error) {
	return _ERC20TokenHub.Contract.TeleporterRegistry(&_ERC20TokenHub.CallOpts)
}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) TeleporterRegistry() (common.Address, error) {
	return _ERC20TokenHub.Contract.TeleporterRegistry(&_ERC20TokenHub.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubSession) Token() (common.Address, error) {
	return _ERC20TokenHub.Contract.Token(&_ERC20TokenHub.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) Token() (common.Address, error) {
	return _ERC20TokenHub.Contract.Token(&_ERC20TokenHub.CallOpts)
}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubCaller) TokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "tokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubSession) TokenAddress() (common.Address, error) {
	return _ERC20TokenHub.Contract.TokenAddress(&_ERC20TokenHub.CallOpts)
}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) TokenAddress() (common.Address, error) {
	return _ERC20TokenHub.Contract.TokenAddress(&_ERC20TokenHub.CallOpts)
}

// TokenDecimals is a free data retrieval call binding the contract method 0x3b97e856.
//
// Solidity: function tokenDecimals() view returns(uint8)
func (_ERC20TokenHub *ERC20TokenHubCaller) TokenDecimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20TokenHub.contract.Call(opts, &out, "tokenDecimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TokenDecimals is a free data retrieval call binding the contract method 0x3b97e856.
//
// Solidity: function tokenDecimals() view returns(uint8)
func (_ERC20TokenHub *ERC20TokenHubSession) TokenDecimals() (uint8, error) {
	return _ERC20TokenHub.Contract.TokenDecimals(&_ERC20TokenHub.CallOpts)
}

// TokenDecimals is a free data retrieval call binding the contract method 0x3b97e856.
//
// Solidity: function tokenDecimals() view returns(uint8)
func (_ERC20TokenHub *ERC20TokenHubCallerSession) TokenDecimals() (uint8, error) {
	return _ERC20TokenHub.Contract.TokenDecimals(&_ERC20TokenHub.CallOpts)
}

// AddCollateral is a paid mutator transaction binding the contract method 0xfd658268.
//
// Solidity: function addCollateral(bytes32 spokeBlockchainID, address spokeBridgeAddress, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) AddCollateral(opts *bind.TransactOpts, spokeBlockchainID [32]byte, spokeBridgeAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "addCollateral", spokeBlockchainID, spokeBridgeAddress, amount)
}

// AddCollateral is a paid mutator transaction binding the contract method 0xfd658268.
//
// Solidity: function addCollateral(bytes32 spokeBlockchainID, address spokeBridgeAddress, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubSession) AddCollateral(spokeBlockchainID [32]byte, spokeBridgeAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.AddCollateral(&_ERC20TokenHub.TransactOpts, spokeBlockchainID, spokeBridgeAddress, amount)
}

// AddCollateral is a paid mutator transaction binding the contract method 0xfd658268.
//
// Solidity: function addCollateral(bytes32 spokeBlockchainID, address spokeBridgeAddress, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) AddCollateral(spokeBlockchainID [32]byte, spokeBridgeAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.AddCollateral(&_ERC20TokenHub.TransactOpts, spokeBlockchainID, spokeBridgeAddress, amount)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) PauseTeleporterAddress(opts *bind.TransactOpts, teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "pauseTeleporterAddress", teleporterAddress)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20TokenHub *ERC20TokenHubSession) PauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.PauseTeleporterAddress(&_ERC20TokenHub.TransactOpts, teleporterAddress)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) PauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.PauseTeleporterAddress(&_ERC20TokenHub.TransactOpts, teleporterAddress)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 sourceBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) ReceiveTeleporterMessage(opts *bind.TransactOpts, sourceBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "receiveTeleporterMessage", sourceBlockchainID, originSenderAddress, message)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 sourceBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC20TokenHub *ERC20TokenHubSession) ReceiveTeleporterMessage(sourceBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.ReceiveTeleporterMessage(&_ERC20TokenHub.TransactOpts, sourceBlockchainID, originSenderAddress, message)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 sourceBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) ReceiveTeleporterMessage(sourceBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.ReceiveTeleporterMessage(&_ERC20TokenHub.TransactOpts, sourceBlockchainID, originSenderAddress, message)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenHub *ERC20TokenHubSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.RenounceOwnership(&_ERC20TokenHub.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.RenounceOwnership(&_ERC20TokenHub.TransactOpts)
}

// Send is a paid mutator transaction binding the contract method 0x5d16225d.
//
// Solidity: function send((bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) Send(opts *bind.TransactOpts, input SendTokensInput, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "send", input, amount)
}

// Send is a paid mutator transaction binding the contract method 0x5d16225d.
//
// Solidity: function send((bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubSession) Send(input SendTokensInput, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.Send(&_ERC20TokenHub.TransactOpts, input, amount)
}

// Send is a paid mutator transaction binding the contract method 0x5d16225d.
//
// Solidity: function send((bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) Send(input SendTokensInput, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.Send(&_ERC20TokenHub.TransactOpts, input, amount)
}

// SendAndCall is a paid mutator transaction binding the contract method 0x65690038.
//
// Solidity: function sendAndCall((bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) SendAndCall(opts *bind.TransactOpts, input SendAndCallInput, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "sendAndCall", input, amount)
}

// SendAndCall is a paid mutator transaction binding the contract method 0x65690038.
//
// Solidity: function sendAndCall((bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubSession) SendAndCall(input SendAndCallInput, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.SendAndCall(&_ERC20TokenHub.TransactOpts, input, amount)
}

// SendAndCall is a paid mutator transaction binding the contract method 0x65690038.
//
// Solidity: function sendAndCall((bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) SendAndCall(input SendAndCallInput, amount *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.SendAndCall(&_ERC20TokenHub.TransactOpts, input, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenHub *ERC20TokenHubSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.TransferOwnership(&_ERC20TokenHub.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.TransferOwnership(&_ERC20TokenHub.TransactOpts, newOwner)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) UnpauseTeleporterAddress(opts *bind.TransactOpts, teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "unpauseTeleporterAddress", teleporterAddress)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20TokenHub *ERC20TokenHubSession) UnpauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.UnpauseTeleporterAddress(&_ERC20TokenHub.TransactOpts, teleporterAddress)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) UnpauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.UnpauseTeleporterAddress(&_ERC20TokenHub.TransactOpts, teleporterAddress)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactor) UpdateMinTeleporterVersion(opts *bind.TransactOpts, version *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.contract.Transact(opts, "updateMinTeleporterVersion", version)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC20TokenHub *ERC20TokenHubSession) UpdateMinTeleporterVersion(version *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.UpdateMinTeleporterVersion(&_ERC20TokenHub.TransactOpts, version)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC20TokenHub *ERC20TokenHubTransactorSession) UpdateMinTeleporterVersion(version *big.Int) (*types.Transaction, error) {
	return _ERC20TokenHub.Contract.UpdateMinTeleporterVersion(&_ERC20TokenHub.TransactOpts, version)
}

// ERC20TokenHubCallFailedIterator is returned from FilterCallFailed and is used to iterate over the raw logs and unpacked data for CallFailed events raised by the ERC20TokenHub contract.
type ERC20TokenHubCallFailedIterator struct {
	Event *ERC20TokenHubCallFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubCallFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubCallFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubCallFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubCallFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubCallFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubCallFailed represents a CallFailed event raised by the ERC20TokenHub contract.
type ERC20TokenHubCallFailed struct {
	RecipientContract common.Address
	Amount            *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterCallFailed is a free log retrieval operation binding the contract event 0xb9eaeae386d339f8115782f297a9e5f0e13fb587cd6b0d502f113cb8dd4d6cb0.
//
// Solidity: event CallFailed(address indexed recipientContract, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterCallFailed(opts *bind.FilterOpts, recipientContract []common.Address) (*ERC20TokenHubCallFailedIterator, error) {

	var recipientContractRule []interface{}
	for _, recipientContractItem := range recipientContract {
		recipientContractRule = append(recipientContractRule, recipientContractItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "CallFailed", recipientContractRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubCallFailedIterator{contract: _ERC20TokenHub.contract, event: "CallFailed", logs: logs, sub: sub}, nil
}

// WatchCallFailed is a free log subscription operation binding the contract event 0xb9eaeae386d339f8115782f297a9e5f0e13fb587cd6b0d502f113cb8dd4d6cb0.
//
// Solidity: event CallFailed(address indexed recipientContract, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchCallFailed(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubCallFailed, recipientContract []common.Address) (event.Subscription, error) {

	var recipientContractRule []interface{}
	for _, recipientContractItem := range recipientContract {
		recipientContractRule = append(recipientContractRule, recipientContractItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "CallFailed", recipientContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubCallFailed)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "CallFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallFailed is a log parse operation binding the contract event 0xb9eaeae386d339f8115782f297a9e5f0e13fb587cd6b0d502f113cb8dd4d6cb0.
//
// Solidity: event CallFailed(address indexed recipientContract, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseCallFailed(log types.Log) (*ERC20TokenHubCallFailed, error) {
	event := new(ERC20TokenHubCallFailed)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "CallFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubCallSucceededIterator is returned from FilterCallSucceeded and is used to iterate over the raw logs and unpacked data for CallSucceeded events raised by the ERC20TokenHub contract.
type ERC20TokenHubCallSucceededIterator struct {
	Event *ERC20TokenHubCallSucceeded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubCallSucceededIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubCallSucceeded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubCallSucceeded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubCallSucceededIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubCallSucceededIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubCallSucceeded represents a CallSucceeded event raised by the ERC20TokenHub contract.
type ERC20TokenHubCallSucceeded struct {
	RecipientContract common.Address
	Amount            *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterCallSucceeded is a free log retrieval operation binding the contract event 0x104deb555f67e63782bb817bc26c39050894645f9b9f29c4be8ae68d0e8b7ff4.
//
// Solidity: event CallSucceeded(address indexed recipientContract, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterCallSucceeded(opts *bind.FilterOpts, recipientContract []common.Address) (*ERC20TokenHubCallSucceededIterator, error) {

	var recipientContractRule []interface{}
	for _, recipientContractItem := range recipientContract {
		recipientContractRule = append(recipientContractRule, recipientContractItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "CallSucceeded", recipientContractRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubCallSucceededIterator{contract: _ERC20TokenHub.contract, event: "CallSucceeded", logs: logs, sub: sub}, nil
}

// WatchCallSucceeded is a free log subscription operation binding the contract event 0x104deb555f67e63782bb817bc26c39050894645f9b9f29c4be8ae68d0e8b7ff4.
//
// Solidity: event CallSucceeded(address indexed recipientContract, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchCallSucceeded(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubCallSucceeded, recipientContract []common.Address) (event.Subscription, error) {

	var recipientContractRule []interface{}
	for _, recipientContractItem := range recipientContract {
		recipientContractRule = append(recipientContractRule, recipientContractItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "CallSucceeded", recipientContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubCallSucceeded)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "CallSucceeded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCallSucceeded is a log parse operation binding the contract event 0x104deb555f67e63782bb817bc26c39050894645f9b9f29c4be8ae68d0e8b7ff4.
//
// Solidity: event CallSucceeded(address indexed recipientContract, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseCallSucceeded(log types.Log) (*ERC20TokenHubCallSucceeded, error) {
	event := new(ERC20TokenHubCallSucceeded)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "CallSucceeded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubCollateralAddedIterator is returned from FilterCollateralAdded and is used to iterate over the raw logs and unpacked data for CollateralAdded events raised by the ERC20TokenHub contract.
type ERC20TokenHubCollateralAddedIterator struct {
	Event *ERC20TokenHubCollateralAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubCollateralAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubCollateralAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubCollateralAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubCollateralAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubCollateralAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubCollateralAdded represents a CollateralAdded event raised by the ERC20TokenHub contract.
type ERC20TokenHubCollateralAdded struct {
	SpokeBlockchainID  [32]byte
	SpokeBridgeAddress common.Address
	Amount             *big.Int
	Remaining          *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterCollateralAdded is a free log retrieval operation binding the contract event 0x6769a5f9bfc8b6e0db839ab981cbf9239274ae72d2d035081a9157d43bd33cb6.
//
// Solidity: event CollateralAdded(bytes32 indexed spokeBlockchainID, address indexed spokeBridgeAddress, uint256 amount, uint256 remaining)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterCollateralAdded(opts *bind.FilterOpts, spokeBlockchainID [][32]byte, spokeBridgeAddress []common.Address) (*ERC20TokenHubCollateralAddedIterator, error) {

	var spokeBlockchainIDRule []interface{}
	for _, spokeBlockchainIDItem := range spokeBlockchainID {
		spokeBlockchainIDRule = append(spokeBlockchainIDRule, spokeBlockchainIDItem)
	}
	var spokeBridgeAddressRule []interface{}
	for _, spokeBridgeAddressItem := range spokeBridgeAddress {
		spokeBridgeAddressRule = append(spokeBridgeAddressRule, spokeBridgeAddressItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "CollateralAdded", spokeBlockchainIDRule, spokeBridgeAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubCollateralAddedIterator{contract: _ERC20TokenHub.contract, event: "CollateralAdded", logs: logs, sub: sub}, nil
}

// WatchCollateralAdded is a free log subscription operation binding the contract event 0x6769a5f9bfc8b6e0db839ab981cbf9239274ae72d2d035081a9157d43bd33cb6.
//
// Solidity: event CollateralAdded(bytes32 indexed spokeBlockchainID, address indexed spokeBridgeAddress, uint256 amount, uint256 remaining)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchCollateralAdded(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubCollateralAdded, spokeBlockchainID [][32]byte, spokeBridgeAddress []common.Address) (event.Subscription, error) {

	var spokeBlockchainIDRule []interface{}
	for _, spokeBlockchainIDItem := range spokeBlockchainID {
		spokeBlockchainIDRule = append(spokeBlockchainIDRule, spokeBlockchainIDItem)
	}
	var spokeBridgeAddressRule []interface{}
	for _, spokeBridgeAddressItem := range spokeBridgeAddress {
		spokeBridgeAddressRule = append(spokeBridgeAddressRule, spokeBridgeAddressItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "CollateralAdded", spokeBlockchainIDRule, spokeBridgeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubCollateralAdded)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "CollateralAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCollateralAdded is a log parse operation binding the contract event 0x6769a5f9bfc8b6e0db839ab981cbf9239274ae72d2d035081a9157d43bd33cb6.
//
// Solidity: event CollateralAdded(bytes32 indexed spokeBlockchainID, address indexed spokeBridgeAddress, uint256 amount, uint256 remaining)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseCollateralAdded(log types.Log) (*ERC20TokenHubCollateralAdded, error) {
	event := new(ERC20TokenHubCollateralAdded)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "CollateralAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubMinTeleporterVersionUpdatedIterator is returned from FilterMinTeleporterVersionUpdated and is used to iterate over the raw logs and unpacked data for MinTeleporterVersionUpdated events raised by the ERC20TokenHub contract.
type ERC20TokenHubMinTeleporterVersionUpdatedIterator struct {
	Event *ERC20TokenHubMinTeleporterVersionUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubMinTeleporterVersionUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubMinTeleporterVersionUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubMinTeleporterVersionUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubMinTeleporterVersionUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubMinTeleporterVersionUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubMinTeleporterVersionUpdated represents a MinTeleporterVersionUpdated event raised by the ERC20TokenHub contract.
type ERC20TokenHubMinTeleporterVersionUpdated struct {
	OldMinTeleporterVersion *big.Int
	NewMinTeleporterVersion *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterMinTeleporterVersionUpdated is a free log retrieval operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterMinTeleporterVersionUpdated(opts *bind.FilterOpts, oldMinTeleporterVersion []*big.Int, newMinTeleporterVersion []*big.Int) (*ERC20TokenHubMinTeleporterVersionUpdatedIterator, error) {

	var oldMinTeleporterVersionRule []interface{}
	for _, oldMinTeleporterVersionItem := range oldMinTeleporterVersion {
		oldMinTeleporterVersionRule = append(oldMinTeleporterVersionRule, oldMinTeleporterVersionItem)
	}
	var newMinTeleporterVersionRule []interface{}
	for _, newMinTeleporterVersionItem := range newMinTeleporterVersion {
		newMinTeleporterVersionRule = append(newMinTeleporterVersionRule, newMinTeleporterVersionItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "MinTeleporterVersionUpdated", oldMinTeleporterVersionRule, newMinTeleporterVersionRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubMinTeleporterVersionUpdatedIterator{contract: _ERC20TokenHub.contract, event: "MinTeleporterVersionUpdated", logs: logs, sub: sub}, nil
}

// WatchMinTeleporterVersionUpdated is a free log subscription operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchMinTeleporterVersionUpdated(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubMinTeleporterVersionUpdated, oldMinTeleporterVersion []*big.Int, newMinTeleporterVersion []*big.Int) (event.Subscription, error) {

	var oldMinTeleporterVersionRule []interface{}
	for _, oldMinTeleporterVersionItem := range oldMinTeleporterVersion {
		oldMinTeleporterVersionRule = append(oldMinTeleporterVersionRule, oldMinTeleporterVersionItem)
	}
	var newMinTeleporterVersionRule []interface{}
	for _, newMinTeleporterVersionItem := range newMinTeleporterVersion {
		newMinTeleporterVersionRule = append(newMinTeleporterVersionRule, newMinTeleporterVersionItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "MinTeleporterVersionUpdated", oldMinTeleporterVersionRule, newMinTeleporterVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubMinTeleporterVersionUpdated)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "MinTeleporterVersionUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinTeleporterVersionUpdated is a log parse operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseMinTeleporterVersionUpdated(log types.Log) (*ERC20TokenHubMinTeleporterVersionUpdated, error) {
	event := new(ERC20TokenHubMinTeleporterVersionUpdated)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "MinTeleporterVersionUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC20TokenHub contract.
type ERC20TokenHubOwnershipTransferredIterator struct {
	Event *ERC20TokenHubOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubOwnershipTransferred represents a OwnershipTransferred event raised by the ERC20TokenHub contract.
type ERC20TokenHubOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC20TokenHubOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubOwnershipTransferredIterator{contract: _ERC20TokenHub.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubOwnershipTransferred)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseOwnershipTransferred(log types.Log) (*ERC20TokenHubOwnershipTransferred, error) {
	event := new(ERC20TokenHubOwnershipTransferred)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubSpokeRegisteredIterator is returned from FilterSpokeRegistered and is used to iterate over the raw logs and unpacked data for SpokeRegistered events raised by the ERC20TokenHub contract.
type ERC20TokenHubSpokeRegisteredIterator struct {
	Event *ERC20TokenHubSpokeRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubSpokeRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubSpokeRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubSpokeRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubSpokeRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubSpokeRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubSpokeRegistered represents a SpokeRegistered event raised by the ERC20TokenHub contract.
type ERC20TokenHubSpokeRegistered struct {
	SpokeBlockchainID       [32]byte
	SpokeBridgeAddress      common.Address
	InitialCollateralNeeded *big.Int
	TokenDecimals           uint8
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterSpokeRegistered is a free log retrieval operation binding the contract event 0x4edc8c0fd01059a8676c9ddadc761869763e7c27856881e50a0390619959fac4.
//
// Solidity: event SpokeRegistered(bytes32 indexed spokeBlockchainID, address indexed spokeBridgeAddress, uint256 initialCollateralNeeded, uint8 tokenDecimals)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterSpokeRegistered(opts *bind.FilterOpts, spokeBlockchainID [][32]byte, spokeBridgeAddress []common.Address) (*ERC20TokenHubSpokeRegisteredIterator, error) {

	var spokeBlockchainIDRule []interface{}
	for _, spokeBlockchainIDItem := range spokeBlockchainID {
		spokeBlockchainIDRule = append(spokeBlockchainIDRule, spokeBlockchainIDItem)
	}
	var spokeBridgeAddressRule []interface{}
	for _, spokeBridgeAddressItem := range spokeBridgeAddress {
		spokeBridgeAddressRule = append(spokeBridgeAddressRule, spokeBridgeAddressItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "SpokeRegistered", spokeBlockchainIDRule, spokeBridgeAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubSpokeRegisteredIterator{contract: _ERC20TokenHub.contract, event: "SpokeRegistered", logs: logs, sub: sub}, nil
}

// WatchSpokeRegistered is a free log subscription operation binding the contract event 0x4edc8c0fd01059a8676c9ddadc761869763e7c27856881e50a0390619959fac4.
//
// Solidity: event SpokeRegistered(bytes32 indexed spokeBlockchainID, address indexed spokeBridgeAddress, uint256 initialCollateralNeeded, uint8 tokenDecimals)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchSpokeRegistered(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubSpokeRegistered, spokeBlockchainID [][32]byte, spokeBridgeAddress []common.Address) (event.Subscription, error) {

	var spokeBlockchainIDRule []interface{}
	for _, spokeBlockchainIDItem := range spokeBlockchainID {
		spokeBlockchainIDRule = append(spokeBlockchainIDRule, spokeBlockchainIDItem)
	}
	var spokeBridgeAddressRule []interface{}
	for _, spokeBridgeAddressItem := range spokeBridgeAddress {
		spokeBridgeAddressRule = append(spokeBridgeAddressRule, spokeBridgeAddressItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "SpokeRegistered", spokeBlockchainIDRule, spokeBridgeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubSpokeRegistered)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "SpokeRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSpokeRegistered is a log parse operation binding the contract event 0x4edc8c0fd01059a8676c9ddadc761869763e7c27856881e50a0390619959fac4.
//
// Solidity: event SpokeRegistered(bytes32 indexed spokeBlockchainID, address indexed spokeBridgeAddress, uint256 initialCollateralNeeded, uint8 tokenDecimals)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseSpokeRegistered(log types.Log) (*ERC20TokenHubSpokeRegistered, error) {
	event := new(ERC20TokenHubSpokeRegistered)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "SpokeRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubTeleporterAddressPausedIterator is returned from FilterTeleporterAddressPaused and is used to iterate over the raw logs and unpacked data for TeleporterAddressPaused events raised by the ERC20TokenHub contract.
type ERC20TokenHubTeleporterAddressPausedIterator struct {
	Event *ERC20TokenHubTeleporterAddressPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubTeleporterAddressPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubTeleporterAddressPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubTeleporterAddressPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubTeleporterAddressPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubTeleporterAddressPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubTeleporterAddressPaused represents a TeleporterAddressPaused event raised by the ERC20TokenHub contract.
type ERC20TokenHubTeleporterAddressPaused struct {
	TeleporterAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTeleporterAddressPaused is a free log retrieval operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterTeleporterAddressPaused(opts *bind.FilterOpts, teleporterAddress []common.Address) (*ERC20TokenHubTeleporterAddressPausedIterator, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "TeleporterAddressPaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubTeleporterAddressPausedIterator{contract: _ERC20TokenHub.contract, event: "TeleporterAddressPaused", logs: logs, sub: sub}, nil
}

// WatchTeleporterAddressPaused is a free log subscription operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchTeleporterAddressPaused(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubTeleporterAddressPaused, teleporterAddress []common.Address) (event.Subscription, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "TeleporterAddressPaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubTeleporterAddressPaused)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "TeleporterAddressPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeleporterAddressPaused is a log parse operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseTeleporterAddressPaused(log types.Log) (*ERC20TokenHubTeleporterAddressPaused, error) {
	event := new(ERC20TokenHubTeleporterAddressPaused)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "TeleporterAddressPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubTeleporterAddressUnpausedIterator is returned from FilterTeleporterAddressUnpaused and is used to iterate over the raw logs and unpacked data for TeleporterAddressUnpaused events raised by the ERC20TokenHub contract.
type ERC20TokenHubTeleporterAddressUnpausedIterator struct {
	Event *ERC20TokenHubTeleporterAddressUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubTeleporterAddressUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubTeleporterAddressUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubTeleporterAddressUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubTeleporterAddressUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubTeleporterAddressUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubTeleporterAddressUnpaused represents a TeleporterAddressUnpaused event raised by the ERC20TokenHub contract.
type ERC20TokenHubTeleporterAddressUnpaused struct {
	TeleporterAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTeleporterAddressUnpaused is a free log retrieval operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterTeleporterAddressUnpaused(opts *bind.FilterOpts, teleporterAddress []common.Address) (*ERC20TokenHubTeleporterAddressUnpausedIterator, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "TeleporterAddressUnpaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubTeleporterAddressUnpausedIterator{contract: _ERC20TokenHub.contract, event: "TeleporterAddressUnpaused", logs: logs, sub: sub}, nil
}

// WatchTeleporterAddressUnpaused is a free log subscription operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchTeleporterAddressUnpaused(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubTeleporterAddressUnpaused, teleporterAddress []common.Address) (event.Subscription, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "TeleporterAddressUnpaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubTeleporterAddressUnpaused)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "TeleporterAddressUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeleporterAddressUnpaused is a log parse operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseTeleporterAddressUnpaused(log types.Log) (*ERC20TokenHubTeleporterAddressUnpaused, error) {
	event := new(ERC20TokenHubTeleporterAddressUnpaused)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "TeleporterAddressUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubTokensAndCallRoutedIterator is returned from FilterTokensAndCallRouted and is used to iterate over the raw logs and unpacked data for TokensAndCallRouted events raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensAndCallRoutedIterator struct {
	Event *ERC20TokenHubTokensAndCallRouted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubTokensAndCallRoutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubTokensAndCallRouted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubTokensAndCallRouted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubTokensAndCallRoutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubTokensAndCallRoutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubTokensAndCallRouted represents a TokensAndCallRouted event raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensAndCallRouted struct {
	TeleporterMessageID [32]byte
	Input               SendAndCallInput
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterTokensAndCallRouted is a free log retrieval operation binding the contract event 0x42eff9005856e3c586b096d67211a566dc926052119fd7cc08023c70937ecb30.
//
// Solidity: event TokensAndCallRouted(bytes32 indexed teleporterMessageID, (bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterTokensAndCallRouted(opts *bind.FilterOpts, teleporterMessageID [][32]byte) (*ERC20TokenHubTokensAndCallRoutedIterator, error) {

	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "TokensAndCallRouted", teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubTokensAndCallRoutedIterator{contract: _ERC20TokenHub.contract, event: "TokensAndCallRouted", logs: logs, sub: sub}, nil
}

// WatchTokensAndCallRouted is a free log subscription operation binding the contract event 0x42eff9005856e3c586b096d67211a566dc926052119fd7cc08023c70937ecb30.
//
// Solidity: event TokensAndCallRouted(bytes32 indexed teleporterMessageID, (bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchTokensAndCallRouted(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubTokensAndCallRouted, teleporterMessageID [][32]byte) (event.Subscription, error) {

	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "TokensAndCallRouted", teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubTokensAndCallRouted)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensAndCallRouted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensAndCallRouted is a log parse operation binding the contract event 0x42eff9005856e3c586b096d67211a566dc926052119fd7cc08023c70937ecb30.
//
// Solidity: event TokensAndCallRouted(bytes32 indexed teleporterMessageID, (bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseTokensAndCallRouted(log types.Log) (*ERC20TokenHubTokensAndCallRouted, error) {
	event := new(ERC20TokenHubTokensAndCallRouted)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensAndCallRouted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubTokensAndCallSentIterator is returned from FilterTokensAndCallSent and is used to iterate over the raw logs and unpacked data for TokensAndCallSent events raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensAndCallSentIterator struct {
	Event *ERC20TokenHubTokensAndCallSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubTokensAndCallSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubTokensAndCallSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubTokensAndCallSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubTokensAndCallSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubTokensAndCallSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubTokensAndCallSent represents a TokensAndCallSent event raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensAndCallSent struct {
	TeleporterMessageID [32]byte
	Sender              common.Address
	Input               SendAndCallInput
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterTokensAndCallSent is a free log retrieval operation binding the contract event 0x5d76dff81bf773b908b050fa113d39f7d8135bb4175398f313ea19cd3a1a0b16.
//
// Solidity: event TokensAndCallSent(bytes32 indexed teleporterMessageID, address indexed sender, (bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterTokensAndCallSent(opts *bind.FilterOpts, teleporterMessageID [][32]byte, sender []common.Address) (*ERC20TokenHubTokensAndCallSentIterator, error) {

	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "TokensAndCallSent", teleporterMessageIDRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubTokensAndCallSentIterator{contract: _ERC20TokenHub.contract, event: "TokensAndCallSent", logs: logs, sub: sub}, nil
}

// WatchTokensAndCallSent is a free log subscription operation binding the contract event 0x5d76dff81bf773b908b050fa113d39f7d8135bb4175398f313ea19cd3a1a0b16.
//
// Solidity: event TokensAndCallSent(bytes32 indexed teleporterMessageID, address indexed sender, (bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchTokensAndCallSent(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubTokensAndCallSent, teleporterMessageID [][32]byte, sender []common.Address) (event.Subscription, error) {

	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "TokensAndCallSent", teleporterMessageIDRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubTokensAndCallSent)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensAndCallSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensAndCallSent is a log parse operation binding the contract event 0x5d76dff81bf773b908b050fa113d39f7d8135bb4175398f313ea19cd3a1a0b16.
//
// Solidity: event TokensAndCallSent(bytes32 indexed teleporterMessageID, address indexed sender, (bytes32,address,address,bytes,uint256,uint256,address,address,address,uint256,uint256) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseTokensAndCallSent(log types.Log) (*ERC20TokenHubTokensAndCallSent, error) {
	event := new(ERC20TokenHubTokensAndCallSent)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensAndCallSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubTokensRoutedIterator is returned from FilterTokensRouted and is used to iterate over the raw logs and unpacked data for TokensRouted events raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensRoutedIterator struct {
	Event *ERC20TokenHubTokensRouted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubTokensRoutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubTokensRouted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubTokensRouted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubTokensRoutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubTokensRoutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubTokensRouted represents a TokensRouted event raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensRouted struct {
	TeleporterMessageID [32]byte
	Input               SendTokensInput
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterTokensRouted is a free log retrieval operation binding the contract event 0x825080857c76cef4a1629c0705a7f8b4ef0282ddcafde0b6715c4fb34b68aaf0.
//
// Solidity: event TokensRouted(bytes32 indexed teleporterMessageID, (bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterTokensRouted(opts *bind.FilterOpts, teleporterMessageID [][32]byte) (*ERC20TokenHubTokensRoutedIterator, error) {

	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "TokensRouted", teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubTokensRoutedIterator{contract: _ERC20TokenHub.contract, event: "TokensRouted", logs: logs, sub: sub}, nil
}

// WatchTokensRouted is a free log subscription operation binding the contract event 0x825080857c76cef4a1629c0705a7f8b4ef0282ddcafde0b6715c4fb34b68aaf0.
//
// Solidity: event TokensRouted(bytes32 indexed teleporterMessageID, (bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchTokensRouted(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubTokensRouted, teleporterMessageID [][32]byte) (event.Subscription, error) {

	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "TokensRouted", teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubTokensRouted)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensRouted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensRouted is a log parse operation binding the contract event 0x825080857c76cef4a1629c0705a7f8b4ef0282ddcafde0b6715c4fb34b68aaf0.
//
// Solidity: event TokensRouted(bytes32 indexed teleporterMessageID, (bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseTokensRouted(log types.Log) (*ERC20TokenHubTokensRouted, error) {
	event := new(ERC20TokenHubTokensRouted)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensRouted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubTokensSentIterator is returned from FilterTokensSent and is used to iterate over the raw logs and unpacked data for TokensSent events raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensSentIterator struct {
	Event *ERC20TokenHubTokensSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubTokensSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubTokensSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubTokensSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubTokensSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubTokensSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubTokensSent represents a TokensSent event raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensSent struct {
	TeleporterMessageID [32]byte
	Sender              common.Address
	Input               SendTokensInput
	Amount              *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterTokensSent is a free log retrieval operation binding the contract event 0x93f19bf1ec58a15dc643b37e7e18a1c13e85e06cd11929e283154691ace9fb52.
//
// Solidity: event TokensSent(bytes32 indexed teleporterMessageID, address indexed sender, (bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterTokensSent(opts *bind.FilterOpts, teleporterMessageID [][32]byte, sender []common.Address) (*ERC20TokenHubTokensSentIterator, error) {

	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "TokensSent", teleporterMessageIDRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubTokensSentIterator{contract: _ERC20TokenHub.contract, event: "TokensSent", logs: logs, sub: sub}, nil
}

// WatchTokensSent is a free log subscription operation binding the contract event 0x93f19bf1ec58a15dc643b37e7e18a1c13e85e06cd11929e283154691ace9fb52.
//
// Solidity: event TokensSent(bytes32 indexed teleporterMessageID, address indexed sender, (bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchTokensSent(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubTokensSent, teleporterMessageID [][32]byte, sender []common.Address) (event.Subscription, error) {

	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "TokensSent", teleporterMessageIDRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubTokensSent)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensSent is a log parse operation binding the contract event 0x93f19bf1ec58a15dc643b37e7e18a1c13e85e06cd11929e283154691ace9fb52.
//
// Solidity: event TokensSent(bytes32 indexed teleporterMessageID, address indexed sender, (bytes32,address,address,address,uint256,uint256,uint256,address) input, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseTokensSent(log types.Log) (*ERC20TokenHubTokensSent, error) {
	event := new(ERC20TokenHubTokensSent)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenHubTokensWithdrawnIterator is returned from FilterTokensWithdrawn and is used to iterate over the raw logs and unpacked data for TokensWithdrawn events raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensWithdrawnIterator struct {
	Event *ERC20TokenHubTokensWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenHubTokensWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenHubTokensWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenHubTokensWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenHubTokensWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenHubTokensWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenHubTokensWithdrawn represents a TokensWithdrawn event raised by the ERC20TokenHub contract.
type ERC20TokenHubTokensWithdrawn struct {
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTokensWithdrawn is a free log retrieval operation binding the contract event 0x6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b.
//
// Solidity: event TokensWithdrawn(address indexed recipient, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) FilterTokensWithdrawn(opts *bind.FilterOpts, recipient []common.Address) (*ERC20TokenHubTokensWithdrawnIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.FilterLogs(opts, "TokensWithdrawn", recipientRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenHubTokensWithdrawnIterator{contract: _ERC20TokenHub.contract, event: "TokensWithdrawn", logs: logs, sub: sub}, nil
}

// WatchTokensWithdrawn is a free log subscription operation binding the contract event 0x6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b.
//
// Solidity: event TokensWithdrawn(address indexed recipient, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) WatchTokensWithdrawn(opts *bind.WatchOpts, sink chan<- *ERC20TokenHubTokensWithdrawn, recipient []common.Address) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _ERC20TokenHub.contract.WatchLogs(opts, "TokensWithdrawn", recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenHubTokensWithdrawn)
				if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensWithdrawn is a log parse operation binding the contract event 0x6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b.
//
// Solidity: event TokensWithdrawn(address indexed recipient, uint256 amount)
func (_ERC20TokenHub *ERC20TokenHubFilterer) ParseTokensWithdrawn(log types.Log) (*ERC20TokenHubTokensWithdrawn, error) {
	event := new(ERC20TokenHubTokensWithdrawn)
	if err := _ERC20TokenHub.contract.UnpackLog(event, "TokensWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
